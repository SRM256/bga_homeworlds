/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * Homeworlds implementation : © <Jonathan Baker> <babamots@gmail.com>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * homeworlds.css
 *
 * Homeworlds stylesheet
 *
 */

#board{
    /* Board margin-right makes space for bank */
    margin-right:310px;
    height:1000px;
    /*background:rgba(255,255,255,0.3);*/
}
#bank{
    /*
    Bank must not have default position type (static)
    or its width/height can't be used for relative sizes of stacks
    */
    position:relative;
    width:300px;
    height:1000px;
    float:right;
    background:rgba(0,0,0,0.3);
}
/* A stack is a place for identical pieces in the bank */
.stack{
    display:inline-block;
    position:absolute;
    width:33.3%;
    height:25%;
}
/* Make pieces in the stack higher the more children there are */
.stack>*{
    position:absolute;
}
.stack>*:nth-child(1){
    bottom:0px;
}
.stack>*:nth-child(2){
    bottom:30px;
}
.stack>*:nth-child(3){
    bottom:60px;
}

/********
 Systems
********/
.system{
    border:2px solid black;
    display:inline-block;
    margin:5px;
}
/* A homeworld system with a non-none homeplayer_id attribute*/
.system:not([homeplayer_id=none]){
    border:2px dashed black;
}
/*
A dummy div so that the system container can be centered
and rows of same-sized systems are created
*/
.centerizer{
    text-align:center;
    display:block;
}
/* A centered, collection-fitting container for same-sized systems */
.system_container{
    display:inline-block;
}

/* All pieces use the same sprite background */
.ship,.star,.banked {
    background-image:url('img/sprites.png');
    background-repeat:no-repeat;
    display:inline-block;
}
.ship,.star{
    /*position:relative;*/
    transition:.5s;
}

/*
The background image has every piece sprite.
This section sets the vertical background offset by piece color and orientation.
*/
.red.ship,.red.banked{
    background-position-y:-0px
}
.red.star{
    background-position-y:-190px
}
.yellow.ship,.yellow.banked{
    background-position-y:-300px
}
.yellow.star{
    background-position-y:-490px
}
.green.ship,.green.banked{
    background-position-y:-600px
}
.green.star{
    background-position-y:-790px
}
.blue.ship,.blue.banked{
    background-position-y:-900px
}
.blue.star{
    background-position-y:-1090px
}

/* Horizontal offset by and width depend on piece size. */
.large{
    background-position-x:-0px;
    width:112px;
}
.medium{
    background-position-x:-112px;
    width:104px;
}
.small{
    background-position-x:-216px;
    width:84px;
}

/* For now, height only depends on whether the piece is standing. */
.ship{
    /* height:190px; original height */
    height:190px;
    transform:rotate(var(--rotateAmount));
}
.star{
    /* height:110px; original height */
    height:110px;
    --rotateAmount:0deg;
}

/*
Ships and systems can be friendly or hostile.
These terms will need to be generalized if 3+ player is implemented.
*/
.hostile{
    float:left;
}
.hostile.ship{
    --rotateAmount:180deg;
}
.friendly{
    float:right;
}
.friendly.ship{
    --rotateAmount:0deg;
}

/* Banked pieces have the height of ships and point up. */
.banked{
    height:190px;
}
.selectable{
    cursor:pointer;
}
.selectable.ship:hover,.selectable.star:hover{
    transform:translate(0px,-10px) rotate(var(--rotateAmount));
}

.selectable.stack,.selectable.system{
    background-color:rgba(255,255,255,0.3);
}
.selectable.stack:hover,.selectable.system:hover{
    background-color:rgba(255,255,255,0.6);
}
.hostile.ship.selectable{
    /* Reverse the shadow for hostile ships since they're rotated */
    filter:drop-shadow(-15px 15px 10px black);
}
.selectable.ship.friendly:not([empower]),.selectable.star{
    /* TODO try box-shadow */
    filter:drop-shadow(15px -15px 10px black);
}
/* Use a custom "empower" attribute to highlight with power color */
[empower=pending]{
    filter:drop-shadow(15px -15px 10px indigo);
}
[empower=sacrifice]{
    width:0px;
}
[empower='1']{
    filter:drop-shadow(15px -15px 10px red);
}
[empower='2']{
    filter:drop-shadow(15px -15px 10px yellow);
}
[empower='3']{
    filter:drop-shadow(15px -15px 10px green);
}
[empower='4']{
    filter:drop-shadow(15px -15px 10px blue);
}

/*
Borrowed from
https://www.kirupa.com/snippets/getting_jittery_on_hover_using_only_css.htm
*/
.overpopulated {
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: jittery;
}
 
@keyframes jittery {
    10% {
        transform: rotate(var(--rotateAmount)) translate(-2px, -3px) scale(1.01, 1.01);
    }
    20% {
        transform: rotate(var(--rotateAmount)) translate(3px, 2px) scale(.99, .99);
    }
    30% {
        transform: rotate(var(--rotateAmount)) translate(-4px, -5px) scale(1.01, 1.01);
    }
    40% {
        transform: rotate(var(--rotateAmount)) translate(2px, 3px) scale(1, 1);
    }
    50% {
        transform: rotate(var(--rotateAmount)) translate(-1px, -2px) scale(.98, .98);
    }
    60% {
        transform: rotate(var(--rotateAmount)) translate(0px, 3px) scale(1.02, 1.02);
    }
    70% {
        transform: rotate(var(--rotateAmount)) translate(-2px, -4px) scale(1, 1);
    }
    80% {
        transform: rotate(var(--rotateAmount)) translate(3px, 5px) scale(.99, .99);
    }
    90% {
        transform: rotate(var(--rotateAmount)) translate(-5px, -3px) scale(1.1, 1.1);
    }
    100% {
        transform: rotate(var(--rotateAmount)) translate(3px, 1px) scale(.95, .95);
    }
}

