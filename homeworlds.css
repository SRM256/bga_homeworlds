/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * Homeworlds implementation : © <Jonathan Baker> <babamots@gmail.com>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * homeworlds.css
 *
 * Homeworlds stylesheet
 *
 */

#HWboard{
    /* Board margin-right makes space for bank */
    margin-right:210px;
    /* height:1000px; */
    /*background:rgba(255,255,255,0.3);*/
    display:block;
}
#HWbank{
    /*
    Bank must not have default position type (static)
    or its width/height can't be used for relative sizes of stacks
    */
    position:relative;
    width:200px;
    height:600px;
    float:right;
    background:rgba(0,0,0,0.3);
}

/* A stack is a place for identical pieces in the bank */
.HWstack{
    display:inline-block;
    position:absolute;
    width:33.3%;
    height:25%;
}
/* Make pieces in the stack higher the more children there are */
.HWstack>*{
    position:absolute;
}
.HWstack>*:nth-child(1){
    bottom:0px;
}
.HWstack>*:nth-child(2){
    bottom:20px;
}
.HWstack>*:nth-child(3){
    bottom:40px;
}

/********
 Systems
********/
.HWsystem{
    border:2px solid black;
    display:inline-block;
    margin:5px;
}
/* A homeworld system with a non-none homeplayer_id attribute*/
.HWsystem:not([homeplayer_id=none]){
    border:2px dashed black;
}
/*
A dummy div so that the system container can be centered
and rows of same-sized systems are created
*/
.HWcenterizer{
    text-align:center;
    display:block;
    min-height:50px;
}
/* A centered, collection-fitting container for same-sized systems */
.HWsystem_container{
    display:inline-block;
}

/* All pieces use the same sprite background */
.HWship,.HWstar,.HWbanked {
    background-image:url('img/sprites.svg');
    background-repeat:no-repeat;
    display:inline-block;
    /* full size: 256px 1200; */
    background-size:128px 600px;
}
.HWship,.HWstar{
    /*position:relative;*/
    transition:.5s;
}

.HWstar_container{
    display:inline-block;
    text-align:center;
}
.HWsystem_label{
    margin-left:5px;
    margin-right:5px;
    float:bottom;
}

/*
The background image has every piece sprite.
This section sets the vertical background offset by piece color and orientation.
*/

/* Offset for the top of the color section in the sprite image */
.HWred{
    --offsetC:-6px
}
.HWyellow{
    --offsetC:-156px
}
.HWgreen{
    --offsetC:-305.5px
}
.HWblue{
    --offsetC:-455px
}

/* Additional offsetP for the top of the piece */
.HWlarge.HWship,.HWlarge.HWbanked{
    --offsetP:-0px;
    margin-top:5px;
    height:86px
}
.HWmedium.HWship,.HWmedium.HWbanked{
    --offsetP:-9px;
    margin-top:14px;
    height:68px
}
.HWsmall.HWship,.HWsmall.HWbanked{
    --offsetP:-18px;
    margin-top:23px;
    height:50px
}
.HWlarge.HWstar{
    --offsetP:-93px;
    margin-top:5px;
    height:49px
}
.HWmedium.HWstar{
    --offsetP:-98px;
    margin-top:10px;
    height:39px
}
.HWsmall.HWstar{
    --offsetP:-103.5px;
    margin-top:15.5px;
    height:29px
}

/* Add the offsets together */

.HWship,.HWstar,.HWbanked{
    background-position-y:calc(var(--offsetC) + var(--offsetP))
}

/* Non-banked pieces get bottom margin matching top margin for symmetry */
.HWlarge.HWship{
    margin-bottom:5px;
}
.HWmedium.HWship{
    margin-bottom:14px;
}
.HWsmall.HWship{
    margin-bottom:23px;
}
.HWlarge.HWstar{
    margin-bottom:5px;
}
.HWmedium.HWstar{
    margin-bottom:10px;
}
.HWsmall.HWstar{
    margin-bottom:15.5px;
}

/* Horizontal offset by and width depend on piece size. */
.HWlarge{
    background-position-x:-1.5px;
    width:49px;
}
.HWmedium{
    background-position-x:-54.5px;
    width:39px;
}
.HWsmall{
    background-position-x:-98px;
    width:29px;
}

.HWship{
    transform:rotate(var(--rotateAmount));
}
.HWstar{
    --rotateAmount:0deg;
}

/*
Give ships and stars a little horizontal margin
Use margin to center banked pieces
*/
.HWship,.HWstar{
    margin-left:5px;
    margin-right:5px;
}
.HWbanked{
    margin:auto;
    left:0;
    right:0
}

/*
Ships and systems can be friendly or hostile.
These terms will need to be generalized if 3+ player is implemented.
*/
.HWhostile{
    float:left;
}
.HWhostile.HWship{
    --rotateAmount:180deg;
}
.HWfriendly{
    float:right;
}
.HWfriendly.HWship{
    --rotateAmount:0deg;
}

/* Selectable stuff */

.HWselectable{
    cursor:pointer;
}
.HWselectable.HWship:hover,.HWselectable.HWstar:hover{
    transform:translate(0px,-5px) rotate(var(--rotateAmount));
}
.HWselectable.HWstack,.HWselectable.HWsystem,.HWselectable#page-content{
    background-color:rgba(255,255,255,0.3);
}
.HWselectable.HWstack:hover,.HWselectable.HWsystem:hover{
    background-color:rgba(255,255,255,0.6);
}
.HWhostile.HWship.HWselectable{
    /* Reverse the shadow for hostile ships since they're rotated */
    filter:drop-shadow(-15px 15px 10px black);
}
.HWselectable.HWship.HWfriendly:not([activate]),.HWselectable.HWstar{
    /* TODO try box-shadow */
    filter:drop-shadow(15px -15px 10px black);
}
/* Use a custom "activate" attribute to highlight with power color */
[activate=pending]{
    filter:drop-shadow(15px -15px 10px indigo);
}
[activate=sacrifice]{
    opacity:0;
}
[activate='1']{
    filter:drop-shadow(10px -10px 10px red);
}
[activate='2']{
    filter:drop-shadow(10px -10px 10px yellow);
}
[activate='3']{
    filter:drop-shadow(10px -10px 10px green);
}
[activate='4']{
    filter:drop-shadow(10px -10px 10px blue);
}

/*
Borrowed from
https://www.kirupa.com/snippets/getting_jittery_on_hover_using_only_css.htm
*/
.HWoverpopulated {
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: jittery;
}
 
@keyframes jittery {
    10% {
        transform: rotate(var(--rotateAmount)) translate(-2px, -3px) scale(1.01, 1.01);
    }
    20% {
        transform: rotate(var(--rotateAmount)) translate(3px, 2px) scale(.99, .99);
    }
    30% {
        transform: rotate(var(--rotateAmount)) translate(-4px, -5px) scale(1.01, 1.01);
    }
    40% {
        transform: rotate(var(--rotateAmount)) translate(2px, 3px) scale(1, 1);
    }
    50% {
        transform: rotate(var(--rotateAmount)) translate(-1px, -2px) scale(.98, .98);
    }
    60% {
        transform: rotate(var(--rotateAmount)) translate(0px, 3px) scale(1.02, 1.02);
    }
    70% {
        transform: rotate(var(--rotateAmount)) translate(-2px, -4px) scale(1, 1);
    }
    80% {
        transform: rotate(var(--rotateAmount)) translate(3px, 5px) scale(.99, .99);
    }
    90% {
        transform: rotate(var(--rotateAmount)) translate(-5px, -3px) scale(1.1, 1.1);
    }
    100% {
        transform: rotate(var(--rotateAmount)) translate(3px, 1px) scale(.95, .95);
    }
}

/* Modifications to main BGA display */
.player_score_value{
    display:none
}
.fa-star{
    display:none
}

